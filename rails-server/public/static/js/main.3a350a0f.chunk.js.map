{"version":3,"sources":["../../../../Documents/My-Cohorts/houston-web-021819/Lecture-Code/43-google-cloud-deployment/frontend/src/components/DragonCard.js","../../../../Documents/My-Cohorts/houston-web-021819/Lecture-Code/43-google-cloud-deployment/frontend/src/components/Peace.js","../../../../Documents/My-Cohorts/houston-web-021819/Lecture-Code/43-google-cloud-deployment/frontend/src/components/War.js","../../../../Documents/My-Cohorts/houston-web-021819/Lecture-Code/43-google-cloud-deployment/frontend/src/components/Home.js","../../../../Documents/My-Cohorts/houston-web-021819/Lecture-Code/43-google-cloud-deployment/frontend/src/components/EditDragon.js","../../../../Documents/My-Cohorts/houston-web-021819/Lecture-Code/43-google-cloud-deployment/frontend/src/App.js","../../../../Documents/My-Cohorts/houston-web-021819/Lecture-Code/43-google-cloud-deployment/frontend/src/serviceWorker.js","../../../../Documents/My-Cohorts/houston-web-021819/Lecture-Code/43-google-cloud-deployment/frontend/src/index.js"],"names":["DragonCard","_ref","name","description","image","id","atWar","shiftDragon","react_default","a","createElement","width","src","onClick","react_router_dom","to","concat","Peace","_this","this","style","float","padding","backgroundColor","props","dragonsAtHome","map","dragon","components_DragonCard","Object","assign","key","React","Component","War","dragonsAtWar","Home","state","dragons","setState","saveDragon","objectSpread","_this2","fetch","then","res","json","console","log","method","headers","Content-Type","body","JSON","stringify","filter","Peace_Peace","War_War","EditDragon","handleChange","e","defineProperty","target","value","handleCheckbox","handleSubmit","preventDefault","match","params","_this$state","onSubmit","type","onChange","checked","Login","password","user","localStorage","setItem","auth_token","App","react_router","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a350a0f.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\n\nconst DragonCard = ({ name, description, image, id, atWar, shiftDragon }) =>  (\n    <div>\n        <h3>{name}</h3>\n        <p>{description}</p>\n        <img width=\"100\" src={image} /><br/>\n        <button onClick={() => shiftDragon(id)}>{atWar ? 'Send Home' : 'Send to War'}</button>\n        <Link to={`/edit-dragon/${id}`} >Edit Dragon</Link>\n    </div>\n)\n\nexport default DragonCard","import React from 'react'\nimport DragonCard from './DragonCard'\n\nexport default class Peace extends React.Component {\n    \n    render(){\n        return (\n            <div style={{float:'left', width:'40%', padding:'5%', backgroundColor:'#f98181'}}>\n                <h1>Home</h1>\n                {this.props.dragonsAtHome.map( dragon => (\n                    <DragonCard \n                        key={dragon.id}\n                        {...dragon}\n                        shiftDragon={this.props.shiftDragon}\n                        // id={dragon.id}\n                        // name={dragon.name}\n                        // description={dragon.description}\n                        // image={dragon.image}\n                        // atWar={dragon.atWar}\n                    />\n                ))}\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport DragonCard from './DragonCard'\n\nexport default class War extends React.Component {\n    \n    render(){\n        return (\n            <div style={{float:'left',width:'40%', padding:'5%', backgroundColor:'#00ffd8'}}>\n                <h1 >War</h1>\n                {this.props.dragonsAtWar.map( dragon => (\n                    <DragonCard \n                        key={dragon.id}\n                        shiftDragon={this.props.shiftDragon} \n                        {...dragon}\n                    />\n                ))}\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport Peace from \"./Peace\";\nimport War from \"./War\";\n\nclass Home extends React.Component {\n\n    state = { \n      dragons: []\n    }\n  \n    shiftDragon = (id) =>{\n      this.setState({\n        dragons: this.state.dragons.map( dragon =>{\n          if(dragon.id === id){\n            this.saveDragon({ ...dragon, atWar: !dragon.atWar })\n            return { ...dragon, atWar: !dragon.atWar }\n          } else {\n            return dragon\n          }\n        })\n      })\n    }\n  \n    componentDidMount(){\n      fetch('http://localhost:3001/dragons')\n        .then( res => res.json() )\n        .then( dragons => {\n          console.log(dragons)\n          this.setState({ \n            dragons: dragons\n          })\n        })\n    }\n\n    saveDragon(dragon){\n      fetch(`http://localhost:3001/dragons/${dragon.id}`, {\n        method: 'PATCH',\n        headers:{\n          'Content-Type':'application/json'\n        },\n        body: JSON.stringify(dragon)\n      })\n    }\n  \n  \n    render(){\n      let dragonsAtHome = this.state.dragons.filter( dragon => !dragon.atWar )\n      let dragonsAtWar = this.state.dragons.filter( dragon => dragon.atWar )\n      return (\n        <div>\n          <Peace dragonsAtHome={dragonsAtHome} shiftDragon={this.shiftDragon}/>\n          <War dragonsAtWar={dragonsAtWar} shiftDragon={this.shiftDragon}/>\n        </div>\n      );\n    }\n  \n  }\n\n  export default Home","import React from 'react'\n\nexport default class EditDragon extends React.Component {\n\n    state = {\n\n    }\n\n    componentDidMount(){\n        let id = this.props.match.params.id\n        fetch(`http://localhost:3001/dragons/${id}`)\n            .then( res => res.json() )\n            .then( dragon => this.setState( dragon ))\n    }\n    \n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleCheckbox = e => {\n        this.setState({\n            [e.target.name]: !this.state[e.target.name]\n        })\n    }\n\n    handleSubmit =  e => {\n        e.preventDefault()\n        let id = this.props.match.params.id\n        fetch(`http://localhost:3001/dragons/${id}`, {\n            method: 'PATCH',\n            headers:{\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state)\n        })\n            .then( res => res.json() )\n            .then( dragon => this.setState( dragon ))\n    }\n\n    render(){\n        //console.log(this.props.location.state)\n        const { name, image, atWar } = this.state\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <h1>Edit Dragon</h1>\n                <div>\n                    <label>Name</label>\n                    <input name=\"name\" value={name} type='text' onChange={this.handleChange} />\n                </div>\n                <div>\n                    <label>Image</label>\n                    <input name=\"image\" value={image} type='text' onChange={this.handleChange} />\n                </div>\n                <div>\n                    <label>At War</label>\n                    <input name=\"atWar\" checked={atWar} type='checkbox' onChange={this.handleCheckbox} />\n                </div>\n                <input type=\"submit\" />\n            </form>\n        )\n    }\n\n}","import React from 'react';\nimport Home from './components/Home'\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport EditDragon from './components/EditDragon';\n\n// Making an Authenticated Request\n\n// fetch('http://localhost:3000/dragons', {\n//  headers: {\n// \t\tAuthorization: `Bearer ${localStorage.getItem('token')}`\n//  }\n// })\n// \t.then( res => res.json())\n// \t.then(console.log)\n\nclass Login extends React.Component {\n\n  state = {\n    name: '',\n    password: ''\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    fetch('http://localhost:3000/login', {\n      method: 'POST',\n      headers:{\n        'Content-Type':'application/json'\n      },\n      body: JSON.stringify({\n        name: this.state.name,\n        password: this.state.password\n      })\n    })\n      .then( res => res.json())\n      .then( user => {\n        localStorage.setItem('token', user.auth_token)\n      })\n  }\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n render(){\n   return (\n     <form>\n       <label>Name</label>\n       <input onChange={this.handleChange} name=\"name\" type=\"text\" />\n       <label>Password</label>\n       <input onChange={this.handleChange} name=\"password\" type=\"text\" />\n       <input type=\"submit\" onClick={this.handleSubmit} />\n     </form>\n   )\n }\n}\n\n\nclass App extends React.Component {\n\n  render(){\n    return (\n      <BrowserRouter>\n        <Switch>\n            <Route path=\"/edit-dragon/:id\" component={EditDragon} />\n            <Route path=\"/login\" component={Login}/>\n            <Route path=\"/\" component={Home}/>\n\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}